%% \section{Case study 1: the windmill data}
%% 
%% \frame{\sectionpage}
%% 
%% % ex2.swv
%% 
%% \begin{frame}[fragile]{R packages used}
%%   
%% <<size="scriptsize">>=
%% library(tidyverse)
%% library(broom)
%% library(MASS)
%% library(leaps)
%% @   
%%   
%% \end{frame}

%% \begin{frame}[fragile]{The windmill data}
%% 
%%   \begin{itemize}
%%   \item Engineer: does amount of electricity generated by windmill
%%     depend on how strongly wind blowing?
%%   \item Measurements of wind speed and DC current generated at various times.
%%   \item Assume the ``various times'' to be randomly selected --- aim
%%     to generalize to ``this windmill at all times''.
%%   \item Research questions:
%%     \begin{itemize}
%%     \item Relationship between wind speed and current generated?
%%     \item If so, what kind of relationship?
%%     \item Can we model relationship to do predictions?
%%     \end{itemize}
%%   \item Do analysis in R.
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Reading in the data}
%% 
%% <<>>=
%% windmill=read_csv("windmill.csv")
%% @ 
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{The data}
%%   
%% <<>>=
%% windmill
%% @   
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Strategy}
%% 
%%   \begin{itemize}
%%   \item Two quantitative variables, looking for relationship:
%%     regression methods.
%%   \item Start with picture (scatterplot).
%%   \item Fit models and do model checking, fixing up things as necessary.
%%   \item Scatterplot:
%%     \begin{itemize}
%%     \item 2 variables, \texttt{DC\_output} and \texttt{wind\_velocity}.
%%     \item First is output/response, other is input/explanatory.
%%     \item Put \texttt{DC\_output} on vertical scale.
%%     \item Add trend, but don't want to assume linear.
%% 
%% 
%% <<>>=
%% g=ggplot(windmill,aes(y=DC_output,x=wind_velocity))+
%%   geom_point()+geom_smooth(se=F)
%% @ 
%%     \end{itemize}
%%   
%% 
%%   \end{itemize}
%% 
%% 
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Scatterplot}
%% 
%% <<fig.height=4>>=
%% g
%% @ 
%% 
%% 
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Comments}
%% 
%%   \begin{itemize}
%%   \item Definitely a relationship: as wind velocity increases, so does
%%     DC output. (As you'd expect.)
%%   \item Is relationship linear? To help judge, \emph{geom\_smooth}
%%     smooths scatterplot trend. (Trend called ``loess'', ``Locally
%%     weighted least squares'' which downweights outliers. Not
%%     constrained to be straight.)
%%   \item Trend more or less linear for while, then curves
%%     downwards. Straight line not so good here.
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Fitting a straight line}
%% 
%%   \begin{itemize}
%%   \item Let's try fitting a straight line anyway, and see what
%%     happens:
%% {\footnotesize
%% <<>>=
%% DC.1=lm(DC_output~wind_velocity,data=windmill)
%% summary(DC.1)  
%% @   
%% }
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% 
%% 
%% \begin{frame}[fragile]{Comments}
%% 
%%   \begin{itemize}
%%   \item Strategy: \texttt{lm} actually fits the regression. Store
%%     results in a variable. \emph{Then} look at the results, eg.\ via
%%     \texttt{summary}. 
%%   \item My strategy for model names: use response variable and a
%%     number. Allows me to fit several models to same data and keep
%%     track of which is which.
%%   \item Results actually pretty good: \texttt{wind.velocity} strongly
%%   significant, R-squared (87\%) high.
%% \item How to check whether regression is appropriate? Look at the
%%   \emph{residuals}, observed minus predicted.
%%   \item Plot using the regression object as ``data frame'':
%% 
%% <<>>=
%% g=ggplot(DC.1,aes(y=.resid,x=.fitted))+
%%   geom_point()+geom_smooth(se=F)
%% @ 
%% 
%% 
%% 
%%   \end{itemize}
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Plot of residuals against fitted values}
%% 
%% <<fig.height=4>>=
%% g
%% @ 
%%   
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments on residual plot}
%% 
%%   \begin{itemize}
%%   \item Residual plot should be a random scatter of points.
%%   \item Should be no pattern ``left over'' after fitting the regression.
%%   \item Smooth trend should be more or less straight across
%%     at 0.
%%   \item Here, have a \emph{curved} trend on residual plot.
%%   \item This means original relationship must have been a curve (as we
%%     saw on original scatterplot).
%%   \item Possible ways to fit a curve:
%%     \begin{itemize}
%%     \item Add a squared term in explanatory variable.
%%     \item Transform response variable (doesn't work well here).
%%     \item See what science tells you about mathematical form of
%%       relationship, and try to apply.
%%     \end{itemize}
%%   \end{itemize}
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Parabolas and fitting parabola model}
%% 
%%   \begin{itemize}
%%   \item A parabola has equation
%%     $$ y= ax^2+bx+c $$
%%     for suitable $a, b, c$. About the simplest function that is not a
%%     straight line.
%%   \item Fit one using \texttt{lm} by adding $x^2$ to right side of
%%     model formula with \texttt{+}: 
%% 
%% <<>>=
%% DC.2=lm(DC_output~wind_velocity+I(wind_velocity^2),
%%   data=windmill)
%% @       
%% 
%% \item The \texttt{I()} necessary because \verb+^+ in model formula
%%   otherwise means something different (to do with interactions in ANOVA).
%% 
%% \item This actually \emph{multiple regression}.
%% \item Call it \emph{parabola model}.
%% 
%% 
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Parabola model output}
%% 
%% {\footnotesize
%% <<>>=
%% summary(DC.2)  
%% @ 
%% }
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments on output}
%% 
%%   \begin{itemize}
%%   \item R-squared has gone up a lot, from 87\% (line) to 97\% (parabola).
%%   \item Coefficient of squared term strongly significant (P-value
%%     $6.59 \times 10^{-8}$).
%%   \item Adding squared term has definitely improved fit of model.
%%   \item Parabola model \emph{better} than linear one.
%%   \item But\ldots need to check residuals again:
%% 
%% <<>>=
%% g=ggplot(DC.2,aes(y=.resid,x=.fitted))+
%%   geom_point()
%% @ 
%% 
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Residual plot from parabola model}
%% 
%% <<fig.height=4>>=
%% g
%% @ 
%% 
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Or, with smooth trend}
%%   
%% <<fig.height=4>>=
%% g+geom_smooth(se=F)
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Scatterplot with fitted line and curve}
%% 
%%   \begin{itemize}
%% 
%% \item Residual plot basically random. Good.
%% \item Smooth trend \emph{not} flat, but might be deceived by few
%%   residuals above 0 in middle.
%%   \item Scatterplot with fitted line and curve like this:
%% 
%% <<>>=
%% g=ggplot(windmill,aes(y=DC_output,x=wind_velocity))+
%%   geom_point()+geom_smooth(method="lm",se=F)+
%%   geom_line(data=DC.2,aes(y=.fitted))
%% @     
%% 
%%   \item This plots: scatterplot (\verb-geom_point-);
%%   straight line (via tweak to \verb-geom_smooth-, which
%%     draws best-fitting line);
%%   fitted curve, using the predicted \texttt{DC\_output}
%%     values, joined by lines (with points not shown).
%%   \item Trick in the \verb-geom_line- is use the \emph{predictions} as
%%     the $y$-points to join by lines (from \texttt{DC.2}), instead of
%%     the original data points. Without the \texttt{data} and
%%     \texttt{aes} in the \verb-geom_line-, \emph{original data points}
%%     would be joined by lines.
%% 
%% \end{itemize}
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Scatterplot with fitted line and curve}
%% 
%% <<fig.height=3.7>>=
%% g
%% @     
%%   
%% Curve clearly fits better than line.
%% 
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Another approach to a curve}
%% 
%%   \begin{itemize}
%%   \item There is a problem with parabolas, which  we'll see later.
%%   \item Go back to engineer with findings so far. Ask, ``what should
%%     happen as wind velocity increases?'':
%%     \begin{quote}
%%       Upper limit on electricity generated, but otherwise, the larger the
%%       wind velocity, the more electricity generated.
%%     \end{quote}
%%   \item Mathematically, sounds like \emph{asymptote}. Straight lines
%%     and parabolas don't have them, but eg.\ $y=1/x$ does: as $x$ gets
%%     bigger, $y$ approaches zero without reaching it.
%%   \item What happens to $y=a+b(1/x)$ as $x$ gets large?
%%   \item $y$ gets closer and closer to $a$ --- $a$ is asymptote.
%%   \item Fit this, call it \emph{asymptote model}.
%%   \item Fitting the model here \emph{because we have math to justify
%%       it}. 
%%   \item Alternative, $y=a+be^{-x}$, approaches asymptote faster.
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% 
%% 
%% \begin{frame}[fragile]{How to fit asymptote model?}
%% 
%%   \begin{itemize}
%%   \item Same idea as for parabola: define new explanatory variable to
%%     be $1/x$, and predict $y$ from it.
%%   \item $x$ is velocity, distance over time.
%%   \item So $1/x$ is time over distance. In walking world, if you walk
%%     5 km/h, take 12 minutes to walk 1 km, called your \emph{pace}. So call
%%     1 over \texttt{wind\_velocity} \texttt{wind\_pace}.
%%   \item Make a scatterplot first to check for straightness (next page)
%% 
%% <<>>=
%% windmill$wind_pace=1/windmill$wind_velocity
%% g=ggplot(windmill,aes(y=DC_output,x=wind_pace))+
%%   geom_point()+geom_smooth(se=F)
%% @     
%% 
%% \item and run regression like this (page after):
%% <<>>=
%% DC.3=lm(DC_output~wind_pace,data=windmill)
%% @ 
%% 
%% 
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Scatterplot for \texttt{wind\_pace}}
%% 
%% <<fig.height=3.7>>=
%% g
%% @     
%% 
%%       That's pretty straight.
%% 
%% 
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Regression output}
%% 
%%   {\footnotesize
%% <<echo=F>>=
%% summary(DC.3)  
%% @ 
%% }
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments}
%% 
%%   \begin{itemize}
%%   \item R-squared, 98\%, even higher than for parabola model (97\%).
%%   \item Simpler model, only one explanatory variable
%%     (\texttt{wind.pace}) vs.\ 2 for parabola model
%%     (\texttt{wind.velocity} and its squareXS).
%%   \item \texttt{wind.pace} (unsurprisingly) strongly significant.
%%   \item Looks good, but check residual plot:
%% 
%% 
%% <<>>=
%% g=ggplot(DC.3,aes(y=.resid,x=.fitted))+
%%   geom_point()+geom_smooth(se=F)
%% @ 
%% 
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% 
%% 
%% \begin{frame}[fragile]{Residual plot for asymptote model}
%% 
%% <<fig.height=4>>=
%% g
%% @ 
%% 
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Plotting trends on scatterplot}
%% 
%%   \begin{itemize}
%%   \item Residual plot not bad. But residuals go up to 0.10 and down to $-0.20$,
%%       suggesting possible skewness (not normal). I think it's not
%%       perfect, but OK overall.
%%     \item Next: plot scatterplot with \emph{all three} fitted
%%       lines/curves on it (for comparison), with legend saying which is
%%       which.
%%     \item First make data frame containing what we need, taken from
%%       the right places:
%%       
%% <<>>=
%% w2=tibble(wind_velocity=windmill$wind_velocity,
%%           DC_output=windmill$DC_output,
%% 	  linear=fitted(DC.1),
%% 	  parabola=fitted(DC.2),
%% 	  asymptote=fitted(DC.3))
%% @ 
%% 
%% 
%% 
%%   \end{itemize}
%% 
%% 
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{What's in ``w2''}
%%   
%% <<>>=
%% w2
%% @       
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Making the plot}
%%   
%%   \begin{itemize}
%%   \item \texttt{ggplot} likes to have \emph{one} column of $x$'s to
%%     plot, and one column of $y$'s, with another column for
%%     distinguishing things.
%%   \item But we have \emph{three} columns of fitted values, that need
%%     to be combined into one.
%%   \item \texttt{gather}, then plot:
%%     
%% <<>>=
%% g=w2 %>% gather(model,fit,linear:asymptote) %>%
%%       ggplot(aes(x=wind_velocity,y=DC_output))+
%%       geom_point()+
%%       geom_line(aes(y=fit,colour=model))
%% @     
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Scatterplot with fitted curves}
%% 
%% <<fig.height=4.5>>=
%% g
%% @ 
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments}
%% 
%%   \begin{itemize}
%%   \item Predictions from curves are very similar.
%%   \item Predictions from asymptote model as good, and from simpler
%%     model (one $x$ not two), so prefer those.
%%   \item Go back to asymptote model \texttt{summary}:
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Asymptote model summary}
%% 
%%   {\footnotesize
%% <<>>=
%% summary(DC.3)  
%% @ 
%% }
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments}
%% 
%%   \begin{itemize}
%%   \item Intercept in this model about 3.
%%   \item Intercept of asymptote model is the asymptote (upper limit of \texttt{DC.output}).
%%   \item Not close to asymptote yet.
%%   \item Therefore, from this model, wind could get stronger and would
%%     generate appreciably more electricity.
%%   \item This is extrapolation! Would like more data from times when
%%     \texttt{wind.velocity} higher.
%%   \item Slope $-7$. Why negative? 
%%     \begin{itemize}
%%     \item As \texttt{wind.velocity} increases,
%%     \item \texttt{wind.pace} goes down,
%%     \item and \texttt{DC.output} goes up. Check.
%%     \end{itemize}
%%   \item Actual slope number hard to interpret. 
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Checking back in with research questions}
%% 
%%   \begin{itemize}
%%   \item Is there a relationship between wind speed and current
%%     generated?
%%     \begin{itemize}
%%     \item Yes.
%%     \end{itemize}
%%   \item If so, what kind of relationship is it?
%%     \begin{itemize}
%%     \item One with an asymptote.
%%     \end{itemize}
%%   \item Can we model the relationship, in such a way that we can do
%%     predictions?
%%     \begin{itemize}
%%     \item Yes, see model \texttt{DC.3} and plot of fitted curve.
%%     \end{itemize}
%%   \item Good. Job done.
%%   \end{itemize}
%% 
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Job done, kinda}
%% 
%%   \begin{itemize}
%%   \item Just because the parabola model and asymptote model agree over the
%% range of the data, doesn't necessarily mean they agree everywhere.
%% \item Extend range of \texttt{wind.velocity} to 1 to 16 (steps of
%%   0.5), and predict \texttt{DC.output} according to the two models:
%% 
%% <<echo=F>>=
%% options(width=55)
%% @   
%% 
%% <<>>=
%% wv=seq(1,16,0.5)
%% wv
%% @ 
%% 
%% \item R has \texttt{predict}, which requires what to predict for, as
%%   data frame. The data frame has to contain values, with matching
%%   names, for all explanatory variables in regression(s).
%% 
%%   \end{itemize}
%% 
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Setting up data frame to predict from}
%%   
%%   \begin{itemize}
%%   \item Linear model had just \texttt{wind\_velocity}.
%%   \item Parabola model had that as well (squared one will be calculated)
%%   \item Asymptote model had just \texttt{wind\_pace} (reciprocal of
%%     velocity).
%%   \item So create data frame called \texttt{wv\_new} with those in:
%% <<>>=
%% wv_new=tibble(wind_velocity=wv, wind_pace=1/wv)
%% @     
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{\texttt{wv\_new}}
%%   
%% <<>>=
%% wv_new
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Doing predictions, one for each model}
%%   
%%   \begin{itemize}
%%   \item Use same names as before:
%% <<>>=
%% linear=predict(DC.1,wv_new)
%% parabola=predict(DC.2,wv_new)
%% asymptote=predict(DC.3,wv_new)
%% @     
%% \item Put it all into a data frame for plotting, along with original data:
%%   
%% <<>>=
%% my_fits=tibble(wind_velocity=wv_new$wind_velocity,
%%                linear,parabola,asymptote)
%% @   
%%     
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{\texttt{my\_fits}}
%% 
%% <<>>=
%% my_fits
%% @   
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Making a plot}
%%   
%%   \begin{itemize}
%%   \item To make a plot, we use the same trick as last time to get all
%%     three predictions on a plot with a legend:
%%     
%% <<>>=
%% g=my_fits %>% gather(model,fit,
%%   linear:asymptote) %>%
%%   ggplot(aes(y=fit,x=wind_velocity,
%%   colour=model))+geom_line()
%% @     
%% \item The observed wind velocities were in this range:
%% <<>>=
%% vels=range(windmill$wind_velocity) ; vels
%% @   
%% 
%% 
%% 
%% \item \texttt{DC.output} between 0 and 3 from
%%   asymptote model. Add lines to graph:
%% 
%%   \begin{footnotesize}
%% <<>>=
%% g2=g+geom_hline(yintercept=0)+geom_hline(yintercept=3)+
%%   geom_vline(xintercept=vels[1])+
%%   geom_vline(xintercept=vels[2])
%% @   
%%     
%%   \end{footnotesize}
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{The plot}
%%   
%% <<fig.height=4>>=
%% g2
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments (1)}
%%   \begin{itemize}
%%   \item Over range of data, two models agree with each other well.
%%   \item Outside range of data, they disagree violently!
%%   \item For larger \texttt{wind.velocity}, asymptote model behaves
%%     reasonably, parabola model does not.
%%   \item What happens as \texttt{wind.velocity} goes to zero? Should
%%     find \texttt{DC.output} goes to zero as well. Does it?
%%   \item For parabola model:
%%     \begin{small}
%% <<>>=
%%   coef(DC.2)
%% @       
%%     \end{small}
%% \item Nope, goes to $-1.15$ (intercept), actually significantly
%%   different from zero.
%%   \end{itemize}
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments (2)}
%% 
%%   \begin{itemize}
%%   \item What about asymptote model?
%%     {\footnotesize
%% <<>>=
%% coef(DC.3)  
%% @ 
%% }
%% \item As \texttt{wind.velocity} heads to 0, \texttt{wind.pace} heads
%%   to $+\infty$, so \texttt{DC.output} heads to $-\infty$!
%% \item Predicted \texttt{DC.output} crosses 0 approx when ($w$
%%   is \texttt{wind.pace} and $v$ \texttt{wind.velocity}) $3-7w=0$, ie.\
%%   $w=3/7$ and $v=7/3$, and
%%  is
%%   negative below that --- nonsense!
%% \item Also need more data for small \texttt{wind.velocity} to
%%   understand relationship. (Is there a lower asymptote?)
%% \item Best we can do now is to predict
%%   \texttt{DC.output} to be zero for small \texttt{wind.velocity}.
%% \item Assumes a ``threshold'' wind velocity below which no
%%   electricity generated at all.
%%   \end{itemize}
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Summary}
%% 
%%   \begin{itemize}
%%   \item Often, in data analysis, there is no completely satisfactory
%%     conclusion, as here.
%%   \item Have to settle for model that works OK, with restrictions.
%%   \item Always something else you can try.
%%   \item At some point you have to say ``I stop.''
%%   \end{itemize}
%%   
%% \end{frame}

\section{Case study 2: Electricity, peak hour demand and total energy
  usage}

\frame{\sectionpage}


\begin{frame}[fragile]{Another regression example (SAS)}

  \begin{itemize}

  \item Electric utility company wants to relate peak-hour demand (kW)
    to total energy usage (kWh) during a month.
  \item Important planning problem, because generation system must be
    large enough to meet maximum demand.
  \item Data from 53 residential customers from August.
  \item Read in data and draw scatterplot:
    \begin{Datastep}
filename myurl url 
  "http://www.utsc.utoronto.ca/~butler/c32/global.csv";
proc import
    datafile=myurl
    dbms=dlm
    out=util
    replace;
    delimiter=' ';
    getnames=yes;
    \end{Datastep}
    

  \end{itemize}
  
\end{frame}

\begin{frame}[fragile]{Check data}
  The first few rows, which look reasonable:

  \begin{Sascode}[store=ca]
proc print data=util(obs=8);    
  \end{Sascode}
  
\Listing[store=ca]{caa}

Make a scatterplot:

    \begin{Sascode}[store=dda]
proc sgplot;
  scatter x=usage y=demand;
    \end{Sascode}

  
\end{frame}

\begin{frame}[fragile]{Scatterplot}

  \Graphic[store=dda,scale=0.5]{ddaa}

\end{frame}

\begin{frame}[fragile]{Fitting a regression}

  \begin{itemize}
  \item Concern: outlier top right (though appears to be legit values)
  \item Trend basically straight, and outlier appears to be on it.
  \item So try fitting regression:

    \begin{Sascode}[store=ddb]
proc reg;
  model demand=usage;      
    \end{Sascode}
    

  \end{itemize}
  
\end{frame}


\begin{frame}[fragile]{Regression output}

    \Listing[store=ddb, fontsize=footnotesize,
      objects=FitStatistics ParameterEstimates]{ddbb}


\end{frame}

\begin{frame}[fragile]{Comments}

  \begin{itemize}
  \item R-squared 70\%: not bad!
  \item Statistically significant slope: \texttt{demand} really does
    depend on \texttt{usage}.
  \item But should look at residuals.
  \item Output from regression also includes array of ``diagnostic
    plots'', over:

  \end{itemize}

\end{frame}

\begin{frame}[fragile]{Regression diagnostics}
  
  \Graphic[scale=0.5,store=ddb,objects=diagnosticspanel]{ddbd}
  
\end{frame}

\begin{frame}[fragile]{What the diagnostic plots show}
  
  Counting from top left, along the rows:
  
  \begin{enumerate}
  \item Regular residual plot, against fitted values 
  \item Standardized residuals against fitted values, with the
    advantage that the standardized residuals behave like $z$-scores
  \item Standardized residuals against leverages (high leverage means
    unusual $x$)
  \item normal quantile plot of residuals
  \item response against predicted
  \item Cook's distance (overall influence) against observation number
  \item histogram (with normal curve) of residuals
  \item I never use this one!
  \item summary of regression
  \end{enumerate}
  
  Over, residuals against $x$'s (only one here, \texttt{usage}).
  
\end{frame}

\begin{frame}[fragile]{Residual plot}
  
\Graphic[store=ddb,scale=0.5,objects=residualplot]{ddbe}
  
\end{frame}

\begin{frame}[fragile]{General comments on these plots}
  
  \begin{itemize}
  \item I usually look at plots \#1 and \#4 of the diagnostic plots,
    and maybe the big plot of residuals against $x$.
  \item Plot of residuals against fitted values shows (if it has a
    pattern) any problems with the regression.
  \item Residuals should be approx.\ normal. Normal quantile plot
    shows if they are not.
  \item Plot of residuals against $x$'s show any problems with that
    particular $x$ (eg.\ nonlinearity). With only one $x$, same
    conclusion as residual plot.
  \item Look at leverages/Cook's distances to see if any unusually
    large ones.
  \end{itemize}
  
\end{frame}

\begin{frame}[fragile]{Comments for these data}

  \begin{itemize}
  \item No trend in residuals vs.\ fitted
  \item but: residuals for \texttt{demand} close to 0 are themselves
    close to zero
  \item and: residuals for larger \texttt{demand} tend to get farther
    from zero
  \item at least up to \texttt{demand} 5 or so.
  \item One of the assumptions hiding behind regression is that
    residuals should be of equal size, not ``fanning out'' as here.
  \item Remedy: transformation of response variable.
  \item Note: there is one point with large leverage, the observation with
    large usage and demand.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{But what transformation?}

  \begin{itemize}
  \item Best way: consult with person who brought you the data.
  \item Can't do that here!
  \item No idea what transformation would be good.
  \item Let data choose: ``Box-Cox transformation''.
  \item Scale is that of ``ladder of powers'': power transformation,
    but 0 is log.
  \item SAS: \texttt{proc transreg}:
    \begin{Sascode}[store=dde]
proc transreg;
  model boxcox(demand)=identity(usage);        
    \end{Sascode}

  \end{itemize}
  
\end{frame}

% \begin{frame}[fragile]{Output (text)}
% 
% {\scriptsize
%   \Listing[store=dde]{ddee}
% }
% 
% \end{frame}

\begin{frame}[fragile]{Output (graph)}
  
  \Graphic[store=dde,scale=0.5]{ddef}
  
\end{frame}

\begin{frame}[fragile]{Comments}
  \begin{itemize}
  \item SAS finds best transformation, here power 0.60 or so.
  \item Also gives you a CI for power, here 0.50 to 0.75.
  \item Ideal transformation should be defensible power, typically
    from set $\{-1,-0.5,0,0.5,1,2\}$. Here that
    would be power 0.5, which would be square root.
  \item Try that and see how it looks.
  \item Create another new data set by bringing in everything from old
    one and make a scatterplot:
    
\begin{Datastep}
data trans;
  set util;
  rtdemand=sqrt(demand);        
\end{Datastep}
\begin{Sascode}[store=ddf]
proc sgplot;
  scatter x=usage y=rtdemand;
\end{Sascode}

  \end{itemize}
\end{frame}


\begin{frame}[fragile]{New scatterplot}

  \Graphic[store=ddf,scale=0.5]{ddff}
  
\end{frame}

\begin{frame}[fragile]{Regression with new response variable}

  \begin{itemize}
  \item Scatter plot still looks straight.
  \item Data set \texttt{trans} is most recently-created (default)
    one, so used in scatterplot above and \texttt{proc reg} below.
    
    \begin{Sascode}[store=ddg]
proc reg;
  model rtdemand=usage;
    \end{Sascode}
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Output}

  \Listing[store=ddg, fontsize=footnotesize, 
    objects=FitStatistics ParameterEstimates]{ddgg}
  
\end{frame}

\begin{frame}[fragile]{Comments}

  \begin{itemize}
  \item R-squared actually decreased (from 70\% to 65\%).
  \item Slope still strongly significant.
  \item Should take a look at residuals now (over):

  \end{itemize}

\end{frame}

\begin{frame}[fragile]{Residual diagnostics for 2nd regression}

  \Graphic[store=ddg,scale=0.5,objects=diagnosticspanel]{ddhh}
  
\end{frame}

\begin{frame}[fragile]{Comments}

  \begin{itemize}
  \item Better. No trends, approx.\ constant variability.
  \item One mildly suspicious outlier at the bottom.
  \item Can trust this regression.
  \item Better a lower R-squared from a regression we can trust than a
    higher one from one we cannot.
  \item Look at scatterplot of \texttt{rtdemand} against \texttt{usage}
    with regression line on it (in graphics output from regression).

  \end{itemize}
  
\end{frame}

\begin{frame}[fragile]{Scatterplot with fitted line}

\Graphic[store=ddg,scale=0.5,objects=fitplot]{ddii}
  
\end{frame}

\begin{frame}[fragile]{Predictions}

  \begin{itemize}
  \item When we transformed the response variable, have to think
    carefully about predictions. Using \texttt{usage=1000}, and with R
    as calculator:
    
<<>>=
int=0.58223
slope=0.00095286
pred=int+slope*1000
pred  
@ 
\item It's a prediction, but of the response variable in regression,
  which was \texttt{rtdemand}, square root of demand.
\item To predict actual demand, need to undo the transformation.
\item Undoing square root is \emph{squaring}:
<<>>=
pred^2  
@ 

  \end{itemize}
  
\end{frame}


\begin{frame}[fragile]{More predictions}

  \begin{itemize}
  \item For usage 1000, 2000, 3000 all at once:
<<>>=
usage=c(1000,2000,3000)
rt.demand=int+slope*usage
demand=rt.demand^2
demand  
@ 
\item Transformations are non-linear changes.
\item Here, though the \texttt{usage} values equally spaced, predicted
  \texttt{demand} values are not.
\item Larger gap between 2nd and 3rd than 1st and 2nd.
  \end{itemize}

\end{frame}

%% \section{Case study 3: Asphalt}
%% 
%% \frame{\sectionpage}
%% 
%% 
%% \begin{frame}[fragile]{The asphalt data}
%% 
%%   \begin{itemize}
%%   \item 31 asphalt pavements prepared under different conditions. How
%%     does quality of pavement depend on these?
%%   \item Variables:
%% \begin{description}
%% \item[\texttt{pct.a.surf}] The percentage of asphalt in the surface layer
%% \item[\texttt{pct.a.base}] The percentage of asphalt in the base layer
%% \item[\texttt{fines}] The percentage of fines in the surface layer
%% \item[\texttt{voids}] The percentage of voids in the surface layer
%% \item[\texttt{rut.depth}] The change in rut depth per million vehicle passes
%% \item[\texttt{viscosity}] The viscosity of the asphalt
%% \item[\texttt{run}] 2 data collection periods: \texttt{run} 1
%%   for run 1, 0 for run 2.
%% \end{description}
%% \item \texttt{rut.depth} response. Depends on other
%%   variables, how? R this time.
%% 
%%   \end{itemize}
%% 
%% 
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Getting set up}
%% 
%%   \begin{itemize}
%%   \item Read in data:
%% 
%% <<>>=
%% asphalt=read_delim("asphalt.txt"," ")
%% @ 
%% 
%% 
%% \item Quantitative variables with one response: multiple regression.
%% \item Some issues here that don't come up in ``simple'' regression;
%%   handle as we go. (STAB27/STAC67 ideas.)
%% 
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{The data}
%%   
%% <<>>=
%% asphalt
%% @   
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Plotting response ``rut depth'' against everything else}
%% 
%%   Same idea as for plotting separate predictions on one plot:
%%   
%% 
%% <<>>=
%% g=asphalt %>% gather(xname,x,
%%   c(pct.a.surf:voids,viscosity:run)) %>%
%%   ggplot(aes(x=x,y=rut.depth))+geom_point()+
%%     facet_wrap(~xname,scales="free")
%% @ 
%% 
%% ``gather all the $x$-variables together into one column called $x$,
%% with another column \texttt{xname} saying which $x$ they were, then
%% plot these $x$'s against \texttt{rut.depth}, a separate facet for each
%% $x$-variable.'' 
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{The plot}
%%   
%% <<fig.height=4>>=
%% g
%% @   
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Interpreting the plots}
%% 
%%   \begin{itemize}
%%     
%%   \item One plot of rut depth against each of the six other variables.
%%   \item Get rough idea of what's going on.
%%   \item Trends mostly weak.
%%   \item \texttt{Viscosity} has strong but non-linear trend.
%%   \item \texttt{Run} has effect but variability bigger when
%%     \texttt{run} is 1.
%%   \item Weak but downward trend for \texttt{voids}.
%%   \item Non-linearity of \texttt{rut.depth-viscosity} relationship
%%     should concern us.
%%   \item Take this back to asphalt engineer: suggests \emph{log} of
%%     \texttt{viscosity}.
%% 
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Log of ``viscosity'': more nearly linear?}
%%   
%%   \begin{itemize}
%%   \item Create new variable \emph{in data frame} to hold log of
%%     \texttt{viscosity}:
%%  
%% <<>>=
%% asphalt_lv=asphalt %>% mutate(log.viscosity=log(viscosity))
%% @     
%% 
%% Now we have to remember to use \texttt{asphalt\_lv}  as our data frame
%% from here on:
%%     
%% <<>>=
%% g=ggplot(asphalt_lv,aes(y=rut.depth,x=log.viscosity))+
%%   geom_point()+geom_smooth(se=F)
%% @   
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Rut depth against log-viscosity}
%%   
%%   
%% <<fig.height=4>>=
%% g
%% @
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments and next steps}
%% 
%%   \begin{itemize}
%%   \item Not \emph{very} linear, but better than before.
%%   \item In multiple regression, hard to guess which $x$'s affect
%%     response. So typically start by predicting from \emph{everything} else.
%%   \item Model formula has response on left, squiggle, explanatories on
%%     right joined by plusses:
%% <<>>=
%% rut.1=lm(rut.depth~pct.a.surf+pct.a.base+fines+
%%   voids+log.viscosity+run,data=asphalt_lv)
%% @ 
%% 
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Regression output}
%% 
%% <<size="scriptsize">>=
%% summary(rut.1)  
%% @ 
%% 
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments}
%% 
%%   \begin{itemize}
%%   \item At bottom: R-squared 81\%, not so bad.
%%   \item $F$-statistic and P-value assert that \emph{something} helping
%%     to predict \texttt{rut.depth}.
%%   \item Table of coefficients says \texttt{log.viscosity}.
%%   \item But confused by clearly non-significant variables: remove
%%     those to get clearer picture of what \emph{is} helpful.
%%   \item Before we do anything, look at residual plots:
%%     \begin{itemize}
%%     \item[(a)] of residuals against fitted values (as usual)
%%     \item[(b)] of residuals against \emph{each explanatory}.
%%     \end{itemize}
%%   \item Problem with (a): fix response variable; problem with some
%%     plots in (b): fix those explanatory variables.
%%   \end{itemize}
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Plot fitted values against residuals}
%%   
%% <<fig.height=4>>=
%% ggplot(rut.1,aes(x=.fitted,y=.resid))+geom_point()
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Plotting residuals against $x$ variables}
%%   
%%   \begin{itemize}
%%   \item Problem here is that residuals are in the fitted model, and
%%     the observed $x$-values are in the original data frame
%%     \texttt{asphalt\_lv}. 
%%   \item Package \texttt{broom} contains a function \texttt{augment}
%%     that combines these two together so that they can later be
%%     plotted: a model first, and then a data frame:
%%     
%% <<warning=F>>=
%% rut.1a=augment(rut.1,asphalt_lv)
%% @     
%% \item This is a data frame rather than a ``tibble'', so display it as
%%   a tibble.
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{What does \texttt{rut.1a} contain?}
%%   
%% <<size="small">>=
%% rut.1a %>% as_tibble()
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Plotting residuals against $x$-variables}
%%   
%% <<>>=
%% g=rut.1a %>% gather(xname,x,
%%       c(pct.a.surf:voids,run,log.viscosity)) %>%
%%     ggplot(aes(x=x,y=.resid))+
%%       geom_point()+facet_wrap(~xname,scales="free")
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{The plot}
%%   
%% <<fig.height=4>>=
%% g
%% @   
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Comments}
%%   
%%   \begin{itemize}
%%   \item There is serious curve in plot of residuals vs.\ fitted
%%     values. Suggests a transformation of $y$.
%%   \item The residuals-vs-$x$'s plots don't know any serious
%%     trends. Worst probably that potential curve against log-viscosity.
%%   \item Also, large positive residual, 10, that shows up on all
%%     plots. Perhaps transformation of $y$ will help with this too.
%%   \item If residual-fitted plot OK, but some residual-$x$ plots not,
%%     try transforming \emph{those} $x$'s, eg.\ by adding $x^2$ to help
%%     with curve.
%%   \end{itemize}
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Which transformation?}
%%   \begin{itemize}
%%   \item I have no idea what would be a good transformation.
%%   \item Box-Cox again?
%%     
%% <<eval=F>>=
%% boxcox(rut.depth~pct.a.surf+pct.a.base+fines+voids+
%%   log.viscosity+run,data=asphalt_lv)
%% @ 
%% 
%%   \end{itemize}
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Box-Cox plot}
%% 
%%   
%% <<echo=F,fig.height=4.5>>=
%% boxcox(rut.depth~pct.a.surf+pct.a.base+fines+voids+
%%   log.viscosity+run,data=asphalt_lv)
%% @ 
%% 
%% 
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Comments on Box-Cox plot}
%% 
%%   \begin{itemize}
%%   \item Best single choice of transformation parameter $\lambda$ is
%%     peak of curve, close to 0.
%%   \item Vertical dotted lines give CI for $\lambda$, about $(-0.05,0.2)$.
%%   \item $\lambda=0$ means ``log''.
%%   \item Narrowness of confidence interval mean that these \emph{not}
%%     supported by data:
%%     \begin{itemize}
%%     \item No transformation ($\lambda=1$)
%%     \item Square root ($\lambda=0.5$)
%%     \item Reciprocal ($\lambda=-1$).
%%     \end{itemize}
%%   \item So make new data frame with new response variable:
%% <<>>=
%% asphalt_2=asphalt_lv %>% 
%%   mutate(log.rut.depth=log(rut.depth))
%% @ 
%% 
%%   \end{itemize}
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Relationships with explanatories}
%%   \begin{itemize}
%%   \item As before: plot response (now \texttt{log.rut.depth}) against
%%     other explanatory variables, all in one shot:
%% <<>>=
%% g3=asphalt_2 %>% gather(xname,x,
%%   c(pct.a.surf:voids,run:log.viscosity)) %>%
%%   ggplot(aes(y=log.rut.depth,x=x))+geom_point()+
%%     facet_wrap(~xname,scales="free")
%% <<>>=
%% @ 
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{The new plots}
%%   
%% <<fig.height=4>>=
%% g3
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Modelling with transformed response}
%% 
%%   \begin{itemize}
%%     
%%   \item These trends look pretty straight, especially with
%%     \texttt{log.viscosity}. 
%%   \item Values of \texttt{log.rut.depth} for each \texttt{run} have
%%     same spread.
%%   \item Other trends weak, but are straight if they exist.
%%     
%%     
%%   \item Start modelling from the beginning again.
%%   \item Model \texttt{log.rut.depth} in terms of everything else, see
%%     what can be removed.
%%     
%%   \item Off we go:
%% <<>>=
%% rut.2=lm(log.rut.depth~pct.a.surf+pct.a.base+
%%    fines+voids+log.viscosity+run,data=asphalt_2)
%% @     
%% \item \texttt{broom} has function \texttt{tidy} that displays just the
%%   coefficients, exactly what we need.
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Output}
%% 
%% <<echo=F>>=
%% options(width=85)
%% @   
%% 
%% <<size="footnotesize">>=
%% tidy(rut.2) 
%% @ 
%%     
%% 
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Taking out everything non-significant}
%% 
%%   \begin{itemize}
%%   \item Try: remove everything but \texttt{pct.a.surf}
%% and \texttt{log.viscosity}:
%% 
%% \begin{footnotesize}
%% <<>>=
%% rut.3=lm(log.rut.depth~pct.a.surf+log.viscosity,data=asphalt_2)    
%% @   
%% \end{footnotesize}
%% 
%% \item Check that removing all those variables wasn't too much:
%% 
%% \begin{footnotesize}
%% <<>>=
%% anova(rut.3,rut.2)  
%% @   
%% \end{footnotesize}
%% 
%% \item $H_0$: two models equally good; $H_a$: bigger model better.
%% \item Null not rejected here; small model as good as the big one, so
%%   prefer simpler smaller model \texttt{rut.3}.
%%   \end{itemize}
%%   
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Take out least significant in sequence}
%% 
%%   
%% <<size="footnotesize">>=
%% tidy(rut.2)
%% @     
%% 
%% Get used to reading scientific notation! Largest P-value is 0.78 for
%% \texttt{pct.a.base}, not significant. 
%% 
%% Or, as over.
%% 
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Put the P-values in order}
%%   
%% <<size="footnotesize">>=
%% tidy(rut.2) %>% arrange(p.value)
%% @   
%% 
%% The largest one is at the bottom.
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Take out \texttt{pct.a.base}:}
%% 
%% <<size="footnotesize">>=
%% rut.4=lm(log.rut.depth~pct.a.surf+fines+voids+log.viscosity+run,
%%   data=asphalt_2)
%% tidy(rut.4) %>% arrange(p.value) 
%% @ 
%% 
%% \texttt{fines} is next to go, P-value 0.32.
%% 
%% 
%% 
%% \end{frame}
%% 
%% \begin{frame}[fragile]{``Update''}
%%   
%%   Another way to do the same thing:
%%   
%% <<size="footnotesize">>=
%% rut.4=update(rut.2,.~.-pct.a.base)
%% tidy(rut.4) %>% arrange(p.value)
%% @     
%% 
%% Again, \texttt{fines} is the one to go. (Output identical as it should
%% be.) 
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Take out \texttt{fines}:}
%% 
%% <<size="footnotesize">>=
%% rut.5=update(rut.4,.~.-fines)
%% tidy(rut.5) %>% arrange(p.value)
%% @ 
%% 
%% Can't take out intercept, so \texttt{run}, with P-value 0.36, goes next.
%%     
%% 
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Take out \texttt{run}:}
%% 
%% <<size="footnotesize">>=
%% rut.6=update(rut.5,.~.-run)
%% tidy(rut.6) %>% arrange(p.value)
%% @ 
%% 
%% Again, can't take out intercept, so largest P-value is for
%% \texttt{voids}, 0.044. But this is significant, so we shouldn't remove
%% \texttt{voids}. 
%%     
%% 
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments}
%% 
%%   \begin{itemize}
%%   \item Here we stop: \texttt{pct.a.surf}, \texttt{voids} and
%%     \texttt{log.viscosity} would all make fit significantly worse if
%%     removed. So they stay.
%%   \item Different final result from taking things out one at a time (top),
%%     than by taking out 4 at once (bottom):
%%     \begin{small}
%% <<>>=
%% coef(rut.6)
%% coef(rut.3)
%% @       
%%     \end{small}
%% 
%% \item I like one-at-a-time method better, as general strategy.
%% \item Point: Can make difference which way we go.
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments on variable selection}
%% 
%%   \begin{itemize}
%%   \item Best way to decide which $x$'s belong: \emph{expert
%%       knowledge}: which of them \emph{should} be important.
%%   \item Best automatic method: what we did, ``backward selection''.
%%   \item Do \emph{not} learn about ``stepwise regression''! See notes
%%     for a reference.
%%   \item R has function \texttt{step} that does backward selection,
%%     like this:
%% <<eval=F>>=
%% step(rut.2,direction="backward")  
%% @ 
%% Gets same answer as we did (by removing least significant $x$).
%% \item Removing non-significant $x$'s may remove interesting ones whose
%%   P-values happened not to reach 0.05. Consider using less stringent
%%   cutoff like 0.20 or even bigger.
%% \item Can also fit all possible regressions, as over (may need to do
%%   \texttt{install.packages("leaps")} first.
%% 
%%  \end{itemize}
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{All possible regressions}
%% 
%% <<echo=F>>=
%% options(width=75)
%% @   
%% <<size="scriptsize">>=
%% leaps=regsubsets(log.rut.depth~pct.a.surf+pct.a.base+fines+voids+
%%   log.viscosity+run,data=asphalt_2,nbest=2)
%% s=summary(leaps)
%% with(s,data.frame(rsq,outmat))
%% @ 
%% 
%% ``Best'' model in the sense of highest R-squared has \emph{everything}
%% in it.
%% 
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Comments}
%% 
%%   \begin{itemize}
%%   \item Problem: even adding a worthless $x$ increases R-squared. So
%%     try for line where R-squared stops increasing ``too much'', eg.\
%%     top line (just \texttt{log.viscosity}), first 3-variable line
%%     (backwards-elimination model). Hard to judge.
%%   \item One solution (STAC67): \emph{adjusted R-squared}, where adding
%%     worthless variable makes it go \emph{down}.
%%   \item \texttt{data.frame} rather than \texttt{tibble} because there
%%     are several columns in \texttt{outmat}.
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{All possible regressions, adjusted R-squared}
%% 
%% <<size="scriptsize">>=
%% with(s,data.frame(adjr2,outmat))
%% @ 
%% 
%% 
%% Backward-elimination model comes out best again.
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Revisiting the best model}
%%   
%%   \begin{itemize}
%%   \item Best model was our \texttt{rut.6}:
%%     \begin{scriptsize}
%% <<>>=
%% summary(rut.6)
%% @     
%%       
%%     \end{scriptsize}
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Revisiting (2)}
%%   
%%   \begin{itemize}
%%   \item Regression slopes say that rut depth increases as
%%     log-viscosity decreases, \texttt{pct.a.surf} increases and
%%     \texttt{voids} increases. This more or less checks out with out
%%     scatterplots against \texttt{log.viscosity}.
%%   \item We should check residual plots again, though previous
%%     scatterplots say it's unlikely that there will be a problem:
%%     
%% <<>>=
%% g=ggplot(rut.6,aes(y=.resid,x=.fitted))+geom_point()
%% @   
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% 
%% \begin{frame}[fragile]{Residuals against fitted values}
%%   
%% <<fig.height=4>>=
%% g
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Plotting residuals against $x$'s}
%%   
%%   \begin{itemize}
%%   \item Do our trick again to put them all on one plot:
%% <<>>=
%% g2=augment(rut.6,asphalt_2) %>%
%%   gather(xname,x,
%%   c(pct.a.surf:voids,run:log.viscosity)) %>%
%%   ggplot(aes(y=.resid,x=x))+geom_point()+
%%   facet_wrap(~xname,scales="free")
%% @     
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Residuals against the $x$'s}
%%   
%% <<fig.height=4.5>>=
%% g2
%% @   
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Comments}
%%   
%%   \begin{itemize}
%%   \item None of the plots show any sort of pattern. The points all
%%     look random  on each plot.
%%   \item On the plot of fitted values (and on the one of
%%     \texttt{log.viscosity}), the points seem to form a ``left half''
%%     and a ``right half'' with a gap in the middle. This is not a
%%     concern.
%%   \item One of the \texttt{pct.a.surf} values is low outlier (4),
%%     shows up top left of that plot.
%%   \item Only two possible values of \texttt{run}; the points in each
%%     group look randomly scattered around 0, with equal spreads.
%%   \item Residuals seem to go above zero further than below, suggesting
%%     a mild non-normality, but not enough to be a problem.
%%   \end{itemize}
%%   
%% \end{frame}
%% 
%% \begin{frame}[fragile]{Variable-selection strategies}
%% 
%%   \begin{itemize}
%%   \item Expert knowledge.
%%   \item Backward elimination.
%%   \item All possible regressions.
%%   \item Taking a variety of models to experts and asking their opinion.
%%   \item Use a looser cutoff to eliminate variables in backward
%%     elimination (eg.\ only if P-value greater than 0.20).
%%   \item If goal is \emph{prediction}, eliminating worthless variables
%%     less important.
%%   \item If goal is \emph{understanding}, want to eliminate worthless
%%     variables where possible.
%%   \item Results of variable selection not always reproducible, so
%%     caution advised.
%%   \end{itemize}
%%   
%% \end{frame}


